openapi: 3.0.3
info:
  title: Personal Finance Tracker API
  description: |
    A comprehensive REST API for personal finance management including income/expense tracking,
    budgeting, financial goals, and analytics.
  version: 1.0.0
  contact:
    name: API Support
    email: api-support@financetracker.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.financetracker.com/v1
    description: Production server
  - url: https://staging-api.financetracker.com/v1
    description: Staging server
  - url: http://localhost:8000/api/v1
    description: Development server

tags:
  - name: Authentication
    description: User authentication and registration
  - name: Users
    description: User profile management
  - name: Transactions
    description: Income and expense transactions
  - name: Categories
    description: Transaction category management
  - name: Budgets
    description: Budget creation and monitoring
  - name: Goals
    description: Financial goal tracking
  - name: Analytics
    description: Financial analytics and reports
  - name: Data Management
    description: Import/export and bulk operations

security:
  - BearerAuth: []

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags: [Authentication]
      summary: Refresh access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refresh_token]
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Logout user
      responses:
        '204':
          description: Logged out successfully

  /auth/password-reset:
    post:
      tags: [Authentication]
      summary: Request password reset
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Password reset email sent
        '404':
          $ref: '#/components/responses/NotFound'

  # User Management
  /users/profile:
    get:
      tags: [Users]
      summary: Get user profile
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
    put:
      tags: [Users]
      summary: Update user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'

  /users/delete:
    delete:
      tags: [Users]
      summary: Delete user account
      parameters:
        - in: query
          name: export_data
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Account deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  export_url:
                    type: string
                    nullable: true

  # Transactions
  /transactions:
    get:
      tags: [Transactions]
      summary: List transactions
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - in: query
          name: type
          schema:
            type: string
            enum: [income, expense]
        - in: query
          name: category_id
          schema:
            type: string
        - in: query
          name: date_from
          schema:
            type: string
            format: date
        - in: query
          name: date_to
          schema:
            type: string
            format: date
        - in: query
          name: min_amount
          schema:
            type: number
        - in: query
          name: max_amount
          schema:
            type: number
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: tags
          schema:
            type: array
            items:
              type: string
        - in: query
          name: payment_method
          schema:
            type: string
        - in: query
          name: is_recurring
          schema:
            type: boolean
        - in: query
          name: sort_by
          schema:
            type: string
            enum: [date, amount, category]
            default: date
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionList'

    post:
      tags: [Transactions]
      summary: Create transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreate'
      responses:
        '201':
          description: Transaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          $ref: '#/components/responses/BadRequest'

  /transactions/bulk:
    post:
      tags: [Transactions]
      summary: Create multiple transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [transactions]
              properties:
                transactions:
                  type: array
                  items:
                    $ref: '#/components/schemas/TransactionCreate'
                  maxItems: 100
      responses:
        '201':
          description: Transactions created
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    type: integer
                  failed:
                    type: integer
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        index:
                          type: integer
                        error:
                          type: string

  /transactions/{transaction_id}:
    get:
      tags: [Transactions]
      summary: Get transaction by ID
      parameters:
        - $ref: '#/components/parameters/TransactionId'
      responses:
        '200':
          description: Transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Transactions]
      summary: Update transaction
      parameters:
        - $ref: '#/components/parameters/TransactionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionUpdate'
      responses:
        '200':
          description: Transaction updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Transactions]
      summary: Delete transaction
      parameters:
        - $ref: '#/components/parameters/TransactionId'
      responses:
        '204':
          description: Transaction deleted
        '404':
          $ref: '#/components/responses/NotFound'

  /transactions/recurring:
    get:
      tags: [Transactions]
      summary: List recurring transaction templates
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
      responses:
        '200':
          description: List of recurring templates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringTemplateList'

    post:
      tags: [Transactions]
      summary: Create recurring transaction template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecurringTemplateCreate'
      responses:
        '201':
          description: Recurring template created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringTemplate'

  /transactions/recurring/{template_id}:
    put:
      tags: [Transactions]
      summary: Update recurring template
      parameters:
        - in: path
          name: template_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecurringTemplateUpdate'
      responses:
        '200':
          description: Template updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringTemplate'

    delete:
      tags: [Transactions]
      summary: Delete recurring template
      parameters:
        - in: path
          name: template_id
          required: true
          schema:
            type: string
        - in: query
          name: delete_future_transactions
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: Template deleted

  # Categories
  /categories:
    get:
      tags: [Categories]
      summary: List categories
      parameters:
        - in: query
          name: type
          schema:
            type: string
            enum: [income, expense]
        - in: query
          name: include_system
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryList'

    post:
      tags: [Categories]
      summary: Create category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreate'
      responses:
        '201':
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

  /categories/{category_id}:
    get:
      tags: [Categories]
      summary: Get category by ID
      parameters:
        - $ref: '#/components/parameters/CategoryId'
      responses:
        '200':
          description: Category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Categories]
      summary: Update category
      parameters:
        - $ref: '#/components/parameters/CategoryId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdate'
      responses:
        '200':
          description: Category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'

    delete:
      tags: [Categories]
      summary: Delete category
      parameters:
        - $ref: '#/components/parameters/CategoryId'
        - in: query
          name: reassign_to
          description: Category ID to reassign transactions to
          schema:
            type: string
      responses:
        '204':
          description: Category deleted
        '409':
          description: Category has transactions and no reassignment specified

  # Budgets
  /budgets:
    get:
      tags: [Budgets]
      summary: List budgets
      parameters:
        - in: query
          name: year
          schema:
            type: integer
        - in: query
          name: month
          schema:
            type: integer
            minimum: 1
            maximum: 12
        - in: query
          name: active
          schema:
            type: boolean
      responses:
        '200':
          description: List of budgets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetList'

    post:
      tags: [Budgets]
      summary: Create budget
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetCreate'
      responses:
        '201':
          description: Budget created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'

  /budgets/{budget_id}:
    get:
      tags: [Budgets]
      summary: Get budget by ID
      parameters:
        - $ref: '#/components/parameters/BudgetId'
      responses:
        '200':
          description: Budget details with current spending
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetWithProgress'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Budgets]
      summary: Update budget
      parameters:
        - $ref: '#/components/parameters/BudgetId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetUpdate'
      responses:
        '200':
          description: Budget updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Budget'

    delete:
      tags: [Budgets]
      summary: Delete budget
      parameters:
        - $ref: '#/components/parameters/BudgetId'
      responses:
        '204':
          description: Budget deleted

  /budgets/alerts:
    get:
      tags: [Budgets]
      summary: Get budget alerts
      parameters:
        - in: query
          name: unread_only
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of budget alerts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetAlertList'

  # Financial Goals
  /goals:
    get:
      tags: [Goals]
      summary: List financial goals
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [active, completed, paused]
        - in: query
          name: category
          schema:
            type: string
      responses:
        '200':
          description: List of goals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalList'

    post:
      tags: [Goals]
      summary: Create financial goal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoalCreate'
      responses:
        '201':
          description: Goal created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Goal'

  /goals/{goal_id}:
    get:
      tags: [Goals]
      summary: Get goal by ID
      parameters:
        - $ref: '#/components/parameters/GoalId'
      responses:
        '200':
          description: Goal details with progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoalWithProgress'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Goals]
      summary: Update goal
      parameters:
        - $ref: '#/components/parameters/GoalId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoalUpdate'
      responses:
        '200':
          description: Goal updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Goal'

    delete:
      tags: [Goals]
      summary: Delete goal
      parameters:
        - $ref: '#/components/parameters/GoalId'
      responses:
        '204':
          description: Goal deleted

  /goals/{goal_id}/contributions:
    post:
      tags: [Goals]
      summary: Add contribution to goal
      parameters:
        - $ref: '#/components/parameters/GoalId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoalContribution'
      responses:
        '201':
          description: Contribution added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Goal'

  # Analytics
  /analytics/summary:
    get:
      tags: [Analytics]
      summary: Get financial summary
      parameters:
        - in: query
          name: period
          required: true
          schema:
            type: string
            enum: [day, week, month, year]
        - in: query
          name: date
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Financial summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinancialSummary'

  /analytics/spending:
    get:
      tags: [Analytics]
      summary: Get spending analytics
      parameters:
        - in: query
          name: period
          required: true
          schema:
            type: string
            enum: [day, week, month, year]
        - in: query
          name: date_from
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: date_to
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: group_by
          schema:
            type: string
            enum: [category, payment_method, day, week, month]
      responses:
        '200':
          description: Spending analytics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpendingAnalytics'

  /analytics/income:
    get:
      tags: [Analytics]
      summary: Get income analytics
      parameters:
        - in: query
          name: date_from
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: date_to
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: group_by
          schema:
            type: string
            enum: [source, category, month]
      responses:
        '200':
          description: Income analytics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomeAnalytics'

  /analytics/cashflow:
    get:
      tags: [Analytics]
      summary: Get cash flow analysis
      parameters:
        - in: query
          name: date_from
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: date_to
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: include_forecast
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Cash flow analysis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashFlowAnalysis'

  /analytics/trends:
    get:
      tags: [Analytics]
      summary: Get spending trends
      parameters:
        - in: query
          name: months
          schema:
            type: integer
            default: 6
            minimum: 1
            maximum: 24
      responses:
        '200':
          description: Spending trends
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpendingTrends'

  # Data Management
  /data/export:
    post:
      tags: [Data Management]
      summary: Export data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportRequest'
      responses:
        '200':
          description: Export created
          content:
            application/json:
              schema:
                type: object
                properties:
                  download_url:
                    type: string
                  expires_at:
                    type: string
                    format: date-time

  /data/import:
    post:
      tags: [Data Management]
      summary: Import transactions from CSV
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [file, mapping]
              properties:
                file:
                  type: string
                  format: binary
                mapping:
                  type: object
                  description: Column mapping configuration
      responses:
        '200':
          description: Import completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportResult'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    TransactionId:
      in: path
      name: transaction_id
      required: true
      schema:
        type: string
    CategoryId:
      in: path
      name: category_id
      required: true
      schema:
        type: string
    BudgetId:
      in: path
      name: budget_id
      required: true
      schema:
        type: string
    GoalId:
      in: path
      name: goal_id
      required: true
      schema:
        type: string
    PageParam:
      in: query
      name: page
      schema:
        type: integer
        default: 1
        minimum: 1
    PageSizeParam:
      in: query
      name: page_size
      schema:
        type: integer
        default: 20
        minimum: 1
        maximum: 100

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    # Common Schemas
    Error:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
          additionalProperties: true

    Pagination:
      type: object
      properties:
        page:
          type: integer
        page_size:
          type: integer
        total_pages:
          type: integer
        total_items:
          type: integer
        has_next:
          type: boolean
        has_previous:
          type: boolean

    # Auth Schemas
    UserRegistration:
      type: object
      required: [email, password, first_name, last_name]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        first_name:
          type: string
        last_name:
          type: string
        currency:
          type: string
          default: USD
        timezone:
          type: string
          default: UTC

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
          default: Bearer
        expires_in:
          type: integer
        user:
          $ref: '#/components/schemas/UserProfile'

    # User Schemas
    UserProfile:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        currency:
          type: string
        timezone:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    UserProfileUpdate:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        currency:
          type: string
        timezone:
          type: string

    # Transaction Schemas
    Transaction:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [income, expense]
        amount:
          type: number
          minimum: 0
        currency:
          type: string
        category_id:
          type: string
        category:
          $ref: '#/components/schemas/Category'
        description:
          type: string
        date:
          type: string
          format: date
        payment_method:
          type: string
          enum: [cash, credit_card, debit_card, bank_transfer, check, other]
        tags:
          type: array
          items:
            type: string
        notes:
          type: string
        receipt_reference:
          type: string
        is_recurring:
          type: boolean
        recurring_template_id:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TransactionCreate:
      type: object
      required: [type, amount, category_id, date]
      properties:
        type:
          type: string
          enum: [income, expense]
        amount:
          type: number
          minimum: 0
        category_id:
          type: string
        description:
          type: string
        date:
          type: string
          format: date
        payment_method:
          type: string
          enum: [cash, credit_card, debit_card, bank_transfer, check, other]
        tags:
          type: array
          items:
            type: string
        notes:
          type: string
        receipt_reference:
          type: string

    TransactionUpdate:
      type: object
      properties:
        amount:
          type: number
          minimum: 0
        category_id:
          type: string
        description:
          type: string
        date:
          type: string
          format: date
        payment_method:
          type: string
        tags:
          type: array
          items:
            type: string
        notes:
          type: string
        receipt_reference:
          type: string

    TransactionList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        pagination:
          $ref: '#/components/schemas/Pagination'
        summary:
          type: object
          properties:
            total_income:
              type: number
            total_expenses:
              type: number
            net:
              type: number

    RecurringTemplate:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [income, expense]
        amount:
          type: number
        category_id:
          type: string
        frequency:
          type: string
          enum: [daily, weekly, biweekly, monthly, quarterly, yearly]
        day_of_month:
          type: integer
          nullable: true
        day_of_week:
          type: integer
          nullable: true
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
          nullable: true
        next_occurrence:
          type: string
          format: date
        is_active:
          type: boolean
        payment_method:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time

    RecurringTemplateCreate:
      type: object
      required: [name, type, amount, category_id, frequency, start_date]
      properties:
        name:
          type: string
        type:
          type: string
          enum: [income, expense]
        amount:
          type: number
          minimum: 0
        category_id:
          type: string
        frequency:
          type: string
          enum: [daily, weekly, biweekly, monthly, quarterly, yearly]
        day_of_month:
          type: integer
          minimum: 1
          maximum: 31
        day_of_week:
          type: integer
          minimum: 0
          maximum: 6
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        payment_method:
          type: string
        description:
          type: string

    RecurringTemplateUpdate:
      type: object
      properties:
        name:
          type: string
        amount:
          type: number
        category_id:
          type: string
        frequency:
          type: string
        day_of_month:
          type: integer
        day_of_week:
          type: integer
        end_date:
          type: string
          format: date
        is_active:
          type: boolean
        payment_method:
          type: string
        description:
          type: string

    RecurringTemplateList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/RecurringTemplate'
        pagination:
          $ref: '#/components/schemas/Pagination'

    # Category Schemas
    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [income, expense]
        icon:
          type: string
        color:
          type: string
        parent_id:
          type: string
          nullable: true
        is_system:
          type: boolean
        spending_limit:
          type: number
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CategoryCreate:
      type: object
      required: [name, type]
      properties:
        name:
          type: string
        type:
          type: string
          enum: [income, expense]
        icon:
          type: string
        color:
          type: string
        parent_id:
          type: string
        spending_limit:
          type: number

    CategoryUpdate:
      type: object
      properties:
        name:
          type: string
        icon:
          type: string
        color:
          type: string
        parent_id:
          type: string
        spending_limit:
          type: number

    CategoryList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Category'

    # Budget Schemas
    Budget:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        month:
          type: integer
        year:
          type: integer
        category_id:
          type: string
          nullable: true
        category:
          $ref: '#/components/schemas/Category'
        amount:
          type: number
        rollover:
          type: boolean
        alert_percentage:
          type: integer
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    BudgetCreate:
      type: object
      required: [name, month, year, amount]
      properties:
        name:
          type: string
        month:
          type: integer
          minimum: 1
          maximum: 12
        year:
          type: integer
        category_id:
          type: string
          description: If null, applies to all expenses
        amount:
          type: number
          minimum: 0
        rollover:
          type: boolean
          default: false
        alert_percentage:
          type: integer
          default: 80
          minimum: 0
          maximum: 100

    BudgetUpdate:
      type: object
      properties:
        name:
          type: string
        amount:
          type: number
        rollover:
          type: boolean
        alert_percentage:
          type: integer
        is_active:
          type: boolean

    BudgetWithProgress:
      allOf:
        - $ref: '#/components/schemas/Budget'
        - type: object
          properties:
            spent:
              type: number
            remaining:
              type: number
            percentage_used:
              type: number
            transactions_count:
              type: integer
            is_over_budget:
              type: boolean

    BudgetList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BudgetWithProgress'
        summary:
          type: object
          properties:
            total_budgeted:
              type: number
            total_spent:
              type: number
            total_remaining:
              type: number

    BudgetAlert:
      type: object
      properties:
        id:
          type: string
        budget_id:
          type: string
        budget:
          $ref: '#/components/schemas/Budget'
        alert_type:
          type: string
          enum: [approaching_limit, over_limit]
        percentage:
          type: number
        message:
          type: string
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time

    BudgetAlertList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BudgetAlert'

    # Goal Schemas
    Goal:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        category:
          type: string
          enum: [emergency_fund, vacation, purchase, debt_payoff, investment, other]
        target_amount:
          type: number
        current_amount:
          type: number
        target_date:
          type: string
          format: date
        status:
          type: string
          enum: [active, completed, paused]
        priority:
          type: integer
        notes:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    GoalCreate:
      type: object
      required: [name, category, target_amount, target_date]
      properties:
        name:
          type: string
        category:
          type: string
          enum: [emergency_fund, vacation, purchase, debt_payoff, investment, other]
        target_amount:
          type: number
          minimum: 0
        current_amount:
          type: number
          default: 0
        target_date:
          type: string
          format: date
        priority:
          type: integer
          default: 1
        notes:
          type: string

    GoalUpdate:
      type: object
      properties:
        name:
          type: string
        target_amount:
          type: number
        target_date:
          type: string
          format: date
        status:
          type: string
          enum: [active, completed, paused]
        priority:
          type: integer
        notes:
          type: string

    GoalWithProgress:
      allOf:
        - $ref: '#/components/schemas/Goal'
        - type: object
          properties:
            percentage_complete:
              type: number
            amount_remaining:
              type: number
            days_remaining:
              type: integer
            monthly_contribution_needed:
              type: number
            on_track:
              type: boolean
            contributions:
              type: array
              items:
                $ref: '#/components/schemas/GoalContribution'

    GoalContribution:
      type: object
      required: [amount]
      properties:
        amount:
          type: number
        date:
          type: string
          format: date
        notes:
          type: string

    GoalList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GoalWithProgress'
        summary:
          type: object
          properties:
            total_goals:
              type: integer
            active_goals:
              type: integer
            completed_goals:
              type: integer
            total_saved:
              type: number
            total_target:
              type: number

    # Analytics Schemas
    FinancialSummary:
      type: object
      properties:
        period:
          type: string
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        income:
          type: number
        expenses:
          type: number
        net:
          type: number
        savings_rate:
          type: number
        top_expense_categories:
          type: array
          items:
            type: object
            properties:
              category:
                $ref: '#/components/schemas/Category'
              amount:
                type: number
              percentage:
                type: number
        comparison_to_previous:
          type: object
          properties:
            income_change:
              type: number
            expense_change:
              type: number
            net_change:
              type: number

    SpendingAnalytics:
      type: object
      properties:
        total_spent:
          type: number
        average_daily:
          type: number
        data:
          type: array
          items:
            type: object
            properties:
              group:
                type: string
              amount:
                type: number
              count:
                type: integer
              percentage:
                type: number
              subcategories:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    amount:
                      type: number

    IncomeAnalytics:
      type: object
      properties:
        total_income:
          type: number
        average_monthly:
          type: number
        sources:
          type: array
          items:
            type: object
            properties:
              source:
                type: string
              amount:
                type: number
              percentage:
                type: number
              transactions:
                type: integer

    CashFlowAnalysis:
      type: object
      properties:
        periods:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              income:
                type: number
              expenses:
                type: number
              net_flow:
                type: number
              running_balance:
                type: number
              is_forecast:
                type: boolean
        summary:
          type: object
          properties:
            total_income:
              type: number
            total_expenses:
              type: number
            net_cash_flow:
              type: number
            ending_balance:
              type: number

    SpendingTrends:
      type: object
      properties:
        trends:
          type: array
          items:
            type: object
            properties:
              month:
                type: string
              year:
                type: integer
              income:
                type: number
              expenses:
                type: number
              savings:
                type: number
              categories:
                type: object
                additionalProperties:
                  type: number
        insights:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                enum: [increasing, decreasing, stable, anomaly]
              category:
                type: string
              description:
                type: string
              percentage_change:
                type: number

    # Data Management Schemas
    ExportRequest:
      type: object
      required: [format, date_from, date_to]
      properties:
        format:
          type: string
          enum: [csv, json]
        date_from:
          type: string
          format: date
        date_to:
          type: string
          format: date
        include:
          type: array
          items:
            type: string
            enum: [transactions, categories, budgets, goals]
          default: [transactions]

    ImportResult:
      type: object
      properties:
        total_rows:
          type: integer
        successful:
          type: integer
        failed:
          type: integer
        duplicates:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              row:
                type: integer
              error:
                type: string
        created_transactions:
          type: array
          items:
            type: string